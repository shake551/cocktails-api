// Code generated by mockery v2.14.1. DO NOT EDIT.

package repository_mock

import (
	context "context"

	model "github.com/shake551/cocktails-api/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// CocktailRepository is an autogenerated mock type for the CocktailRepository type
type CocktailRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, params
func (_m *CocktailRepository) Create(ctx context.Context, params model.CocktailParams) (*model.CocktailDetail, error) {
	ret := _m.Called(ctx, params)

	var r0 *model.CocktailDetail
	if rf, ok := ret.Get(0).(func(context.Context, model.CocktailParams) *model.CocktailDetail); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CocktailDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.CocktailParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CocktailRepository) GetByID(ctx context.Context, id int64) (model.CocktailDetail, error) {
	ret := _m.Called(ctx, id)

	var r0 model.CocktailDetail
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.CocktailDetail); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.CocktailDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLimit provides a mock function with given fields: ctx, limit, offset, keyword
func (_m *CocktailRepository) GetLimit(ctx context.Context, limit int64, offset int64, keyword string) ([]model.Cocktail, error) {
	ret := _m.Called(ctx, limit, offset, keyword)

	var r0 []model.Cocktail
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) []model.Cocktail); ok {
		r0 = rf(ctx, limit, offset, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Cocktail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string) error); ok {
		r1 = rf(ctx, limit, offset, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByIDs provides a mock function with given fields: ctx, ids
func (_m *CocktailRepository) GetListByIDs(ctx context.Context, ids []int64) ([]model.Cocktail, error) {
	ret := _m.Called(ctx, ids)

	var r0 []model.Cocktail
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []model.Cocktail); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Cocktail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCocktailRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCocktailRepository creates a new instance of CocktailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCocktailRepository(t mockConstructorTestingTNewCocktailRepository) *CocktailRepository {
	mock := &CocktailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
